import { Page, expect } from "@playwright/test";

export async function Barra(page: Page) {
  const menuButton = page.locator("#ham-menu"); // Bot√≥n del men√∫
  const menuVisible = page.locator("#mysidenav"); // Men√∫ lateral

  // Obtener y mostrar la resoluci√≥n de pantalla en GitHub Actions
  const resolution = await page.evaluate(() => ({
    width: window.innerWidth,
    height: window.innerHeight
  }));
  console.log(`üñ•Ô∏è Resoluci√≥n actual: ${resolution.width}x${resolution.height}`);

  console.log("üîç Verificando si el bot√≥n del men√∫ existe...");
  await menuButton.waitFor({ state: "attached", timeout: 10000 });

  console.log("üñ±Ô∏è Moviendo cursor hasta el bot√≥n del men√∫...");
  await menuButton.scrollIntoViewIfNeeded();
  await menuButton.hover();

  console.log("‚úÖ Bot√≥n del men√∫ encontrado. Haciendo clic...");
  await menuButton.click();
  await page.waitForTimeout(1000); // Asegurar que no hay animaciones interrumpiendo

  console.log("‚è≥ Verificando si el men√∫ se abri√≥...");
  const menuAppeared = await menuVisible.waitFor({ state: "visible", timeout: 5000 }).catch(() => false);

  if (!menuAppeared) {
    console.log("‚ö†Ô∏è Men√∫ no visible. Intentando un segundo clic con 'force: true'...");
    await menuButton.hover();
    await menuButton.click({ force: true });
    await page.waitForTimeout(1000);
  }

  console.log("‚úÖ Verificando si el men√∫ lateral sigue visible...");
  await expect(menuVisible).toBeVisible({ timeout: 5000 });

  console.log("üîí Asegurando que el men√∫ no se cierre inmediatamente...");
  await page.waitForTimeout(2000);
  if (!(await menuVisible.isVisible())) {
    throw new Error("‚ùå El men√∫ se cerr√≥ inesperadamente.");
  }

  console.log("‚úÖ Men√∫ lateral abierto correctamente.");
}
